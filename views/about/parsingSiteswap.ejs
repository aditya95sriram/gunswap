<% include ../partials/header.ejs %>

<h3>Parsing Siteswap</h3>

<p>
A siteswap is a string that defines a juggling pattern. Explanation of siteswap is out of scope for this post, I'm simply providing additional documentation on how the gunswap Siteswap object parses its input. I think the Juggling Lab documentation has a great page explaining siteswap notation: http://jugglinglab.sourceforge.net/html/ssnotation.html. However, I am not going to consider any of the special extensions they use (at least for now).
</p>

<b>Breaking a siteswap down by beats</b>

<p>
Every siteswap can be broken down as instructions for a series of beats. Some siteswaps are very simple to break down: <code>531</code> is a <code>5</code> toss followed by a <code>3</code> followed by a <code>1</code>. However, consider the siteswap <code>(4,4)(4x,4x)</code> which is a relatively long string, but only contains instructions for <code>2</code> beats. Each hand throws a <code>4</code>, then each hand throws a crossing <code>4</code>. Things can get even more complicated if you consider multiple jugglers, like the siteswap <code>&lt;[33]|(4x,4x)&gt;</code> which only contains instructions for 1 beat: juggler 0 is doing a multiplexed 3 ball cascade and juggler 2 is doing a synchronous 4-ball crossing fountain.
</p>

<p>
We need to develop a regex that can split any siteswap string into its component beats. So let's start simple.
</p>

<b>Vanilla siteswap</b>

<p><code>TOSS = \d|[a-o]</code></p>

<p>
First consider some simple vanilla siteswaps like <code>3</code>, <code>55500</code>, and <code>b97531</code> (ok maybe this one isn't simple...). All of these siteswaps match the regular expression meaning they can be a digit <code>\d</code> or <code>|</code> any character "a" through "o" <code>[a-o]</code>. Note that "a" through "o" really just represent the numbers 10 through 24. We stop at "o" because later on we'll see that "p" is going to be used for something other than representing a toss height.
</p>

<b>Multiplexes</b>

<p><code>MULTIPLEX = \[(\d|[a-g])+\]</code></p>

<p>
Multiplex notation allows us to throw multiple props with the same hand on the same beat. This is handled using brackets. So the siteswap <code>33[33]</code> is a 4 ball version of the 3 ball cascade where the third throw of the pattern is done with 2 balls following the same path. Let's break down this regex:
<ul>
	<li><code>\[</code> - starts with a bracket (the bracket needs to be escaped)</li>
	<li><code>(\d|[a-g])+</code> - contains at least 1 of our valid toss expressions</li>
	<li><code>\]</code> - ends with a bracket</li>
</ul>
</p>

<b>Synchronous</b>

<p><code>SYNC = \((TOSS|MULTIPLEX),(TOSS|MULTIPLEX)\)</code></p>

<p>
Now things start to get a little complicated. Consider a synchronous siteswap <code>(4x,4x)</code>. This is a synchronous 4-ball fountain where every throw crosses to the other hand. In synchronous siteswap the left side of the comma is the left hand's instructions and the right side is the right hand's instructions. The instructions can be a vanilla toss or a multiplex. Thus, we check for an open and close parentheses with a comma separated vanilla toss or multiplex pattern in between.
</p>

<p>
You may have noticed that we aren't handling the "x" in <code>(4x,4x)</code>. We need to update our <code>TOSS</code> regex to handle that. It is now going to be <code>(\d|[a-g])x?</code>. Note that the question mark means we're looking for 1 or 0 "x" characters following our valid toss pattern. Also note that the "x" character isn't necessarily limited to synchronous siteswap, though its use in vanilla siteswaps is somewhat limited (mostly for transition throws into synchronous).
</p>

<b>A valid beat</b>

<p><code>BEAT = (TOSS|MULTIPLEX|SYNC)</code></p>

<p>
We now have enough regexes to identify valid beats within a pattern, and that's a relatively simple pattern itself. It's simply checking for a vanilla toss, a multiplex, or a sync toss. This allows us to break even complicated siteswaps into their component beats. Consider the siteswap <code>5(4,4)[33]</code>. This would be split into: toss a <code>5</code>, then toss a <code>(4,4)</code>, then toss a <code>[33]</code>. While technically not a valid siteswap (we'll see that level of validation later on) it still has a valid siteswap format.
</p>

<b>Passing</b>

<p><code>PASS = &lt;BEAT(\|BEAT)+&gt;&lt;/BEAT(\|BEAT)+&t;</code></p>

<p>
Consider the passing siteswap ==<3p|3p><3|3>== which has two jugglers both running a 3 ball cascade and passing on every other beat. In passing patterns each beat is enclosed between "<" and ">" characters, with each juggler's instructions separated by a "|" character. Each juggler's instructions must be a valid beat, thus we can construct a pass regex solely from the BEAT regex.

Now we need to make another extension to our original vanilla siteswap regex, but only for passing patterns. If we have a 2 juggler passing pattern then we need to look for a "p" appended to any vanilla toss:
</p>

<p><code>(\d|[a-g])x?p?</code></p>

<p>
If there are three or more jugglers then we need a way of determining which juggler the pass is targeted at. This will be denoted by the number immediately following the "p":
</p>

<p><code>(\d|[a-g])x?(p[1-numJugglers])?</code></p>

<b>Putting it all together</b>

<p><code>^(PASS)+|(BEAT)+$</code></p>

<p>
The final regex checks to see if you have an entire string composed of any number of passing beats or non-passing beats. That's it! Recall that this does not guarantee the validity of a siteswap, it just ensures the string is a valid format. Later on we will use the concept of state diagrams to determine if a siteswap is valid.
</p>

<b>Extending siteswap</b>

<p>
Pretty much all of the above syntax is <a href="https://en.wikipedia.org/wiki/Siteswap">standard siteswap</a>. However, the Gunswap animator makes use of <a href="../about/syntax">several extensions</a> to siteswap to define things such as bounces, variable dwell ratio, prop orientation and spins, etc. These are handled by adding to the <code>TOSS</code> expression defined above. For example, Gunswap allows you to define a dwell ratio per toss like this: <code>555D{1.2}</code> (in this example the dwell ratio is 1.2 for the last toss, the rest use the pattern default). Thus, we add the following to <code>TOSS</code>: <code>(D{\d*.?\d*})?</code>.  
</p>

<% include ../partials/footer.ejs %>